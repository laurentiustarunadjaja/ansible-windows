- name: Verify required programs on Windows (registry-based)
  hosts: windows
  gather_facts: no
  collections:
    - ansible.windows

  vars:
    required_programs:
      - "VMware Tools"
      - "Panda Adaptive Defense 360"
      - "Panda Endpoint Agent"
      - "Endpoint Secure Agent"
    report_path: 'C:\InstalledProgramsReport.txt'
    fail_if_missing: true

  tasks:
    - name: Gather minimal facts (hostname, time)
      ansible.builtin.setup:

    - name: Collect installed programs (registry, 32/64-bit)
      ansible.windows.win_shell: |
        $paths = @(
          'HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*',
          'HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*'
        )
        $apps = foreach ($p in $paths) {
          Get-ItemProperty -Path $p -ErrorAction SilentlyContinue |
            Where-Object { $_.DisplayName } |
            Select-Object @{n='Name';e={$_.DisplayName}}, @{n='Version';e={$_.DisplayVersion}}
        }
        $apps = $apps | Sort-Object Name -Unique
        @($apps) | ConvertTo-Json -Depth 3 -Compress
      args:
        executable: powershell.exe
      register: installed_programs_raw
      changed_when: false

    - name: Parse installed programs JSON
      ansible.builtin.set_fact:
        installed_programs: "{{ (installed_programs_raw.stdout | default('[]')) | from_json | list }}"

    - name: Build installed_names
      ansible.builtin.set_fact:
        installed_names: "{{ installed_programs | map(attribute='Name') | select('string') | list | unique }}"

    - name: Build helper lists (part 1)
      ansible.builtin.set_fact:
        installed_names_lc: "{{ installed_names | map('lower') | list }}"
        required_lc: "{{ required_programs | map('lower') | list }}"

    - name: Build name map (lower -> original)
      ansible.builtin.set_fact:
        name_map: "{{ dict(required_lc | zip(required_programs)) }}"

    - name: Compute missing (lowercased) list
      ansible.builtin.set_fact:
        missing_lc: "{{ required_lc | difference(installed_names_lc) }}"

    - name: Build missing_programs (original casing)
      ansible.builtin.set_fact:
        missing_programs: "{{ missing_lc | map('extract', name_map) | list }}"

    - name: Show summary
      ansible.builtin.debug:
        msg:
          - "Installed programs found: {{ installed_names | length }}"
          - "Missing programs: {{ (missing_programs | length == 0) | ternary('None', missing_programs | join(', ')) }}"

    - name: Build a plain-text report
      ansible.builtin.set_fact:
        report_text: |
          Host: {{ ansible_hostname }}
          Timestamp (UTC): {{ ansible_date_time.iso8601 }}

          Required programs:
          {% for r in required_programs %}  - {{ r }}
          {% endfor %}

          Missing programs:
          {% if missing_programs | length == 0 %}  - None
          {% else %}
          {%   for m in missing_programs %}  - {{ m }}
          {%   endfor %}
          {% endif %}

          Installed programs ({{ installed_programs | length }}):
          {% for app in (installed_programs | sort(attribute='Name')) -%}
          - {{ app.Name }}{% if app.Version %} - Version: {{ app.Version }}{% endif %}
          {% endfor %}

    - name: Write report to file
      ansible.windows.win_copy:
        content: "{{ report_text }}"
        dest: "{{ report_path }}"

    - name: Verify report file exists
      ansible.windows.win_stat:
        path: "{{ report_path }}"
      register: file_status

    - name: Show report file status
      ansible.builtin.debug:
        var: file_status.stat.exists
